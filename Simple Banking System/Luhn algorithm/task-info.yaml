type: edu
custom_name: stage2
files:
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import banking.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;


    public class SimpleBankSystemTest extends StageTest {


        public SimpleBankSystemTest() {
            super(Main.class);
        }

        private static String correctCardNumber = "";
        private static String correctPin = "";
        private static String incorrectCardNumber = "";
        private static String incorrectPin = "";
        private static boolean isCompleted = false;

        @Override
        public List<TestCase> generate() {
            return List.of(
                    //Проверка на правильный вывод информации о созданной карте
                    new TestCase()
                            .setInput("1")
                            .addInput(output -> {

                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                if (!cardNumberMatcher.find()) {
                                    return new CheckResult(false, "You are printing the card number " +
                                            "incorrectly. The card number should look like in the example: " +
                                            "400000DDDDDDDDDD, where D is a digit.");
                                }

                                Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                                Matcher pinMatcher = pinPattern.matcher(out);

                                if (!pinMatcher.find()) {
                                    return new CheckResult(false, "You are printing the card PIN " +
                                            "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                            "a digit.");
                                }
                                correctPin = pinMatcher.group().trim();
                                correctCardNumber = cardNumberMatcher.group();

                                return "1";
                            })
                            .addInput(output -> {

                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                if (!cardNumberMatcher.find()) {
                                    return new CheckResult(false, "You are printing the card number " +
                                            "incorrectly. The card number should look like in the example: " +
                                            "400000DDDDDDDDDD, where D is a digit.");
                                }

                                Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                                Matcher pinMatcher = pinPattern.matcher(out);

                                if (!pinMatcher.find()) {
                                    return new CheckResult(false, "You are printing the card PIN " +
                                            "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                            "a digit.");
                                }

                                String anotherCardNumber = cardNumberMatcher.group();

                                if (anotherCardNumber.equals(correctCardNumber)) {
                                    return new CheckResult(false, "Your program generates two identical card numbers!");
                                }

                                isCompleted = true;
                                return "0";
                            }),
    //                //Проверка авторизации и log out
                    new TestCase()
                            .setInput("1")
                            .addInput(output -> {
                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                if (!cardNumberMatcher.find()) {
                                    return new CheckResult(false, "You are printing the card number " +
                                            "incorrectly. The card number should look like in the example: " +
                                            "400000DDDDDDDDDD, where D is a digit.");
                                }

                                Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                                Matcher pinMatcher = pinPattern.matcher(out);

                                if (!pinMatcher.find()) {
                                    return new CheckResult(false, "You are printing the card PIN " +
                                            "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                            "a digit.");
                                }
                                correctPin = pinMatcher.group().trim();
                                correctCardNumber = cardNumberMatcher.group();

                                return "2";
                            })
                            .addInput(output -> correctCardNumber + "\n" + correctPin)
                            .addInput(output -> {

                                if (!output.toString().toLowerCase().contains("successfully")) {
                                    return new CheckResult(false, "The user should be signed in after " +
                                            "entering the correct card information.");
                                }

                                return "2";
                            })
                            .addInput(output -> {

                                if (!output.toString().toLowerCase().contains("create an account")) {
                                    return new CheckResult(false, "The user should be logged out after choosing 'Log out' option");
                                }

                                isCompleted = true;
                                return "0";
                            }),
                    //Проверка авторизации с неправильным пинкодом
                    new TestCase()
                            .setInput("1")
                            .addInput(output -> {
                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                                Matcher pinMatcher = pinPattern.matcher(out);

                                if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                                    return new CheckResult(false, "You should output card number and PIN like in example!");
                                }

                                correctCardNumber = cardNumberMatcher.group();
                                correctPin = pinMatcher.group();

                                Random random = new Random();

                                incorrectPin = correctPin;

                                while (correctPin.equals(incorrectPin)) {
                                    incorrectPin = String.valueOf(1000 + random.nextInt(8999));
                                }

                                return "2";
                            })
                            .addInput(output -> correctCardNumber + "\n" + incorrectPin)
                            .addInput(output -> {

                                if (output.toString().toLowerCase().contains("successfully")) {
                                    return new CheckResult(false, "The user should not be signed in after" +
                                            " entering incorrect card information.");
                                }

                                isCompleted = true;
                                return "0";
                            }),
                    //Проверка авторизации для несуществующего акканута
                    new TestCase()
                            .setInput("1")
                            .addInput(output -> {
                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                                Matcher pinMatcher = pinPattern.matcher(out);

                                if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                                    return new CheckResult(false, "You should output card number " +
                                            "and PIN like in example");
                                }

                                correctPin = pinMatcher.group().trim();
                                correctCardNumber = cardNumberMatcher.group();

                                Random random = new Random();

                                incorrectCardNumber = correctCardNumber;

                                while (correctCardNumber.equals(incorrectCardNumber)) {
                                    incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
                                }

                                return "2";
                            })
                            .addInput(output -> incorrectCardNumber + "\n" + correctPin)
                            .addInput(output -> {

                                if (output.toString().toLowerCase().contains("successfully")) {
                                    return new CheckResult(false, "The user should not be signed" +
                                            " in after entering the information of a non-existing card.");
                                }

                                isCompleted = true;
                                return "0";
                            }),

                    // Проверка баланса
                    new TestCase()
                            .setInput("1")
                            .addInput(output -> {
                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                                Matcher pinMatcher = pinPattern.matcher(out);

                                if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                                    return new CheckResult(false, "You should output card number and PIN like in example");
                                }

                                correctPin = pinMatcher.group().trim();
                                correctCardNumber = cardNumberMatcher.group();

                                return "2";
                            })
                            .addInput(output -> correctCardNumber + "\n" + correctPin)
                            .addInput(output -> "1")
                            .addInput(output -> {
                                if (!output.toString().contains("0")) {
                                    return new CheckResult(false, "Expected balance: 0");
                                }

                                isCompleted = true;
                                return "0";
                            }),
                    //Проверка номера карты по алгоритму Луна
                    new TestCase()
                            .setInput("1")
                            .addInput(output -> {
                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                if (!cardNumberMatcher.find()) {
                                    return new CheckResult(false, "You should output card number and PIN like in example");
                                }

                                String cardNumber = cardNumberMatcher.group();

                                if (!checkLuhnAlgorithm(cardNumber)) {
                                    return new CheckResult(false, "The card number doesn’t pass the Luhn algorithm.");
                                }

                                return "1";
                            })
                            .addInput(output -> {
                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                if (!cardNumberMatcher.find()) {
                                    return new CheckResult(false, "You should output card number and PIN like in example");
                                }

                                String cardNumber = cardNumberMatcher.group();

                                if (!checkLuhnAlgorithm(cardNumber)) {
                                    return new CheckResult(false, "The card number doesn’t pass the Luhn algorithm.");
                                }

                                return "1";
                            })
                            .addInput(output -> {
                                String out = output.toString().trim().toLowerCase();

                                Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                                Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                                if (!cardNumberMatcher.find()) {
                                    return new CheckResult(false, "You should output card number and PIN like in example");
                                }

                                String cardNumber = cardNumberMatcher.group();

                                if (!checkLuhnAlgorithm(cardNumber)) {
                                    return new CheckResult(false, "The card number doesn’t pass the Luhn algorithm.");
                                }


                                return "1";
                            })
                            .addInput(output -> {
                                isCompleted = true;
                                return "0";
                            })
            );
        }

        @Override
        public CheckResult check(String reply, Object attach) {
            if (!isCompleted)
                return new CheckResult(false, "Looks like your program unexpectedly terminated without choosing 'exit' item");
            else
                isCompleted = false;
            return CheckResult.correct();
        }

        //Возвращает true, если проверка пройдена. Иначе false
        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    import java.util.HashMap;
    import java.util.Objects;
    import java.util.Random;
    import java.util.Scanner;

    public class Main {

        private static final Scanner scanner = new Scanner(System.in);
        private static final Random random = new Random();
        private static final HashMap<String, String> accountAndPin = new HashMap<>();

        public static void main(String[] args) {
            frontPage();
        }

        public static void frontPage() {
            while (true) {
                System.out.println("1. Create an account");
                System.out.println("2. Log into account");
                System.out.println("0. Exit");
                int option = scanner.nextInt();
                switch (option) {
                    case 1:
                        createAccount();
                        System.out.println();
                        break;
                    case 2:
                        logIn();
                        System.out.println();
                        break;
                    case 0:
                        System.out.println("Bye!");
                        System.exit(0);
                    default:
                        System.out.println("Enter 1, 2 or 0.");
                        System.out.println();
                        break;
                }
            }
        }

        public static void createAccount() {
            System.out.println("Your card has been created");
            System.out.println("Your card number:");
    //        String mii = String.valueOf(random.nextInt(9) + 1);
            String mii = "4";
            String bin = "00000";
            StringBuilder accountNumber = new StringBuilder();
            for (int i = 0; i < 10; i++) {
                accountNumber.append(random.nextInt(10));
            }
            String account = mii + bin + accountNumber;
            System.out.println(account);
            System.out.println("Your card PIN:");
            StringBuilder pinBuild = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                pinBuild.append(random.nextInt(10));
            }
            String pin = "" + pinBuild;
            System.out.println(pin);

            accountAndPin.put(account, pin);
        }

        public static void logIn() {
            System.out.println("Enter your card number:");
            String enterCardNumber = scanner.next();
            System.out.println("Enter your PIN:");
            String enterPin = scanner.next();
            if (accountAndPin.containsKey(enterCardNumber)) {
                if (Objects.equals(enterPin, accountAndPin.get(enterCardNumber))) {
                    System.out.println("You have successfully logged in!");
                    afterLogin();
                } else {
                    System.out.println("Wrong card number or PIN!");
                }
            }
        }

        public static void afterLogin() {
            while (true) {
                System.out.println();
                System.out.println("1. Balance");
                System.out.println("2. Log out");
                System.out.println("0. Exit");
                int optionMenu = scanner.nextInt();
                switch (optionMenu) {
                    case 1:
                        seeBalance();
                        break;
                    case 2:
                        System.out.println("You have successfully logged out!");
                        System.out.println();
                        frontPage();
                        break;
                    case 0:
                        System.exit(0);
                    default:
                        System.out.println("Enter 1, 2 or 0.");
                        System.out.println();
                        break;
                }
            }
        }

        public static void seeBalance() {
            System.out.println("Balance: 0");
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement
status: Solved
record: 2
